{"ast":null,"code":"import { mockApiService } from '../services/mockApiService';\n\n// Service API mocké pour la démonstration\nconst axiosInstance = {\n  get: async (url, config = {}) => {\n    console.log(`[DEMO] GET ${url}`);\n    if (url.includes('/api/products/') && url.includes('/reviews')) {\n      const productId = url.split('/')[3];\n      return await mockApiService.getProductReviews(productId);\n    } else if (url.includes('/api/products/') && !url.includes('reviews')) {\n      const productId = url.split('/')[3];\n      return await mockApiService.getProduct(productId);\n    } else if (url.includes('/api/products')) {\n      return await mockApiService.getProducts(config.params || {});\n    } else if (url.includes('/api/categories')) {\n      return await mockApiService.getCategories();\n    } else if (url.includes('/api/wishlist/') && url.includes('/check')) {\n      const productId = url.split('/')[3];\n      return await mockApiService.checkWishlist(productId);\n    } else if (url.includes('/api/wishlist')) {\n      return await mockApiService.getWishlist();\n    }\n\n    // Réponse par défaut\n    return {\n      data: {\n        success: false,\n        message: 'Endpoint non implémenté en mode démo'\n      }\n    };\n  },\n  post: async (url, data) => {\n    console.log(`[DEMO] POST ${url}`, data);\n    if (url.includes('/api/auth/login')) {\n      return await mockApiService.login(data);\n    } else if (url.includes('/api/auth/register')) {\n      return await mockApiService.register(data);\n    } else if (url.includes('/api/wishlist/')) {\n      const productId = url.split('/')[3];\n      return await mockApiService.addToWishlist(productId);\n    }\n    return {\n      data: {\n        success: true,\n        message: 'Action simulée en mode démo'\n      }\n    };\n  },\n  delete: async url => {\n    console.log(`[DEMO] DELETE ${url}`);\n    if (url.includes('/api/wishlist/')) {\n      const productId = url.split('/')[3];\n      return await mockApiService.removeFromWishlist(productId);\n    }\n    return {\n      data: {\n        success: true,\n        message: 'Suppression simulée en mode démo'\n      }\n    };\n  },\n  put: async (url, data) => {\n    console.log(`[DEMO] PUT ${url}`, data);\n    return {\n      data: {\n        success: true,\n        message: 'Mise à jour simulée en mode démo'\n      }\n    };\n  },\n  defaults: {\n    headers: {\n      common: {}\n    }\n  }\n};\nexport default axiosInstance;","map":{"version":3,"names":["mockApiService","axiosInstance","get","url","config","console","log","includes","productId","split","getProductReviews","getProduct","getProducts","params","getCategories","checkWishlist","getWishlist","data","success","message","post","login","register","addToWishlist","delete","removeFromWishlist","put","defaults","headers","common"],"sources":["C:/Users/Public/Libraries/one/Hanane/frontend/src/config/axiosDemo.js"],"sourcesContent":["import { mockApiService } from '../services/mockApiService';\r\n\r\n// Service API mocké pour la démonstration\r\nconst axiosInstance = {\r\n  get: async (url, config = {}) => {\r\n    console.log(`[DEMO] GET ${url}`);\r\n    \r\n    if (url.includes('/api/products/') && url.includes('/reviews')) {\r\n      const productId = url.split('/')[3];\r\n      return await mockApiService.getProductReviews(productId);\r\n    } else if (url.includes('/api/products/') && !url.includes('reviews')) {\r\n      const productId = url.split('/')[3];\r\n      return await mockApiService.getProduct(productId);\r\n    } else if (url.includes('/api/products')) {\r\n      return await mockApiService.getProducts(config.params || {});\r\n    } else if (url.includes('/api/categories')) {\r\n      return await mockApiService.getCategories();\r\n    } else if (url.includes('/api/wishlist/') && url.includes('/check')) {\r\n      const productId = url.split('/')[3];\r\n      return await mockApiService.checkWishlist(productId);\r\n    } else if (url.includes('/api/wishlist')) {\r\n      return await mockApiService.getWishlist();\r\n    }\r\n    \r\n    // Réponse par défaut\r\n    return {\r\n      data: {\r\n        success: false,\r\n        message: 'Endpoint non implémenté en mode démo'\r\n      }\r\n    };\r\n  },\r\n\r\n  post: async (url, data) => {\r\n    console.log(`[DEMO] POST ${url}`, data);\r\n    \r\n    if (url.includes('/api/auth/login')) {\r\n      return await mockApiService.login(data);\r\n    } else if (url.includes('/api/auth/register')) {\r\n      return await mockApiService.register(data);\r\n    } else if (url.includes('/api/wishlist/')) {\r\n      const productId = url.split('/')[3];\r\n      return await mockApiService.addToWishlist(productId);\r\n    }\r\n    \r\n    return {\r\n      data: {\r\n        success: true,\r\n        message: 'Action simulée en mode démo'\r\n      }\r\n    };\r\n  },\r\n\r\n  delete: async (url) => {\r\n    console.log(`[DEMO] DELETE ${url}`);\r\n    \r\n    if (url.includes('/api/wishlist/')) {\r\n      const productId = url.split('/')[3];\r\n      return await mockApiService.removeFromWishlist(productId);\r\n    }\r\n    \r\n    return {\r\n      data: {\r\n        success: true,\r\n        message: 'Suppression simulée en mode démo'\r\n      }\r\n    };\r\n  },\r\n\r\n  put: async (url, data) => {\r\n    console.log(`[DEMO] PUT ${url}`, data);\r\n    return {\r\n      data: {\r\n        success: true,\r\n        message: 'Mise à jour simulée en mode démo'\r\n      }\r\n    };\r\n  },\r\n\r\n  defaults: {\r\n    headers: {\r\n      common: {}\r\n    }\r\n  }\r\n};\r\n\r\nexport default axiosInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}